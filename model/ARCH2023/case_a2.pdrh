// ARCH 2023 Minimal example A, variant 2

// Assuming dReal is in the path

// This experiment is performed on a Linux VM
// ProbReach version: 1.4 (68e9d301d88273916d7277ac592636483a26721b)
// dReal version: v3.16.05 (commit 3cc1370a5789)
// OS: Ubuntu 22.04.2 LTS
// RAM: 8GB
// CPU info: 
// 	Manufacturer: Intel Core Processor (Skylake)
//	Cache size: 16384 KB
//	Frequency (MHz): 2591.785
//
// How to run: 
//	time ./formal_verifier -t 4 -k 1 -e 0.005 --partition-prob case_a2.pdrh
//
// Output:
//	[4.4651246572725334e-01,4.5026208720019412e-01] | 3.7496214729407784e-03
//
//	real	1m49.294s
//	user	5m41.576s
//	sys	1m15.245s 

[-1,100] x; 
[-1,100] x_2; 
[0,20] tau; // time

#define mu 5
//#define sigma 1.414213562
#define sigma 2
#define pi 3.14159265359

dist_pdf(0.1 * exp((-0.1)*x_1), 0, inf, 0) x_1;

// Folded normal distribution
dist_normal(mu, sigma) y;
//dist_pdf(exp(-((x_2-mu)^2)/(2*sigma^2))/(sigma*sqrt(2*pi))+ exp(-((x_2+mu)^2)/(2*sigma^2))/(sigma*sqrt(2*pi)), 0, inf, 0) x_2;

{
    mode 0;
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = 2;
        d/dt[x_2] = 0;
    jump:
    (and (tau = x_2) (tau < x_1) (tau < 5.8)) ==> @1 (and (x' = x) (tau' = tau));
}

{
    mode 1;         // final mode
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = -3;
        d/dt[x_2] = 0;
    jump:
}

init:
@0 (and (x = 0) (tau = 0) (x_2 = sqrt(y*y)));

goal:
@1 (and (tau <= 10) (x <= -1));
