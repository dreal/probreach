// ARCH 2023 Minimal example B, variant 2

// Assumes dReal is in the path!

// This experiment is performed on a Linux VM
// ProbReach version: 1.4 (68e9d301d88273916d7277ac592636483a26721b)
// dReal version: v3.16.05 (commit 3cc1370a5789)
// OS: Ubuntu 22.04.2 LTS
// RAM: 8GB
// CPU info: 
// 	Manufacturer: Intel Core Processor (Skylake)
//	Cache size: 16384 KB
//	Frequency (MHz): 2591.785
//
// How to run: 
//	time ./formal_verifier -t 4 -k 1 -e 0.005 --partition-prob case_b2.pdrh
//
// Output (for TMAX = 10):
//	[3.0758950754787606e-01,3.1086201484295206e-01] | 3.2725072950759992e-03
//
//	real	2m15.388s
//	user	7m2.185s
//	sys	1m22.731s
//
// Output (for TMAX = 12):
//	[4.4651246572725339e-01,4.5026208720019451e-01] | 3.7496214729411115e-03
//
//	real	1m57.507s
//	user	5m51.619s
//	sys	1m26.131s

//#define TMAX 10
#define TMAX 12

[-10000,10000] x; 
[0,100] x_2; 
[0,20] tau; // time

#define mu 5
//#define sigma 1.414213562
#define sigma 2
#define pi 3.14159265359

dist_pdf(0.1 * exp((-0.1)*x_1), 0, inf, 0) x_1;
dist_normal(mu, sigma) y;

{
    mode 0;
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = 2;
        d/dt[x_2] = 0;
    jump:
    // instead of introducing a mode and variable y, just add 2 to tau
    (and (tau = x_2) (tau < x_1) (tau < 5.8)) ==> @2 (and (x' = x) (tau' = tau + 2));
    (and (tau = x_2) (tau < x_1) (tau < 5.8)) ==> @3 (and (x' = x) (tau' = tau + 2));
}

{
    mode 2;         // goal mode
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = -3;
        d/dt[x_2] = 0;
    jump:
}

{
    mode 3;
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = 0;
        d/dt[x_2] = 0;
    jump:
}


init:
@0 (and (x = 0) (tau = 0) (x_2 = sqrt(y*y)));

goal:
@2 (and (tau = TMAX) (x <= -1));
