// ARCH 2023 Minimal example B, variant 2

// Assumes dReal is in the path!

// This experiment is performed on a Linux VM
// ProbReach version: 1.4 (68e9d301d88273916d7277ac592636483a26721b)
// dReal version: v3.16.05 (commit 3cc1370a5789)
// OS: Ubuntu 22.04.2 LTS
// RAM: 8GB
// CPU info: 
// 	Manufacturer: Intel Core Processor (Skylake)
//	Cache size: 16384 KB
//	Frequency (MHz): 2591.785
//
// How to run the formal approach: 
//	time ./formal_verifier -t 6 -k 1 -e 0.005 --partition-prob case_b2.pdrh
//
// Output (for TMAX = 10):
//  [3.0758950754787623e-01,3.1086201484295217e-01] | 3.2725072950759437e-03
//
//  real	1m22.429s
//  user	6m14.805s
//  sys	1m11.032s
//
// Output (for TMAX = 12):
//  [4.4651246572725356e-01,4.5026208720019417e-01] | 3.7496214729406119e-03
//
//  real	1m18.099s
//  user	6m9.543s
//  sys	1m6.999s
//
//
// How to run the statistical approach (Bayesian estimations algorithm, default confidence value = 0.99):
//  time ./mc_verifier -t 6 -k 1 -e 0.005 case_b2.pdrh
//
// Output (for TMAX = 10):
//  [3.0549352295128140e-01,3.1549352295128136e-01] | 9.9999999999999534e-03
//
//  real	3m52.740s
//  user	18m29.273s
//  sys	4m39.618s
//
// Output (for TMAX = 12):
//  [4.4178710267550886e-01,4.5180234773991923e-01] | 1.0015245064410372e-02
//
//  real	5m43.193s
//  user	27m34.222s
//  sys	6m35.023s


#define TMAX 10
//#define TMAX 12

[-10000,10000] x; 
[0,100] x_2; 
[0,20] tau; // time

#define mu 5
//#define sigma 1.414213562
#define sigma 2
#define pi 3.14159265359

dist_exp(0.1) x_1;
dist_normal(mu, sigma) y;

{
    mode 0;
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = 2;
        d/dt[x_2] = 0;
    jump:
    // instead of introducing a mode and variable y, just add 2 to tau
    (and (tau = x_2) (tau < x_1) (tau < 5.8)) ==> @2 (and (x' = x) (tau' = tau + 2));
    (and (tau = x_2) (tau < x_1) (tau < 5.8)) ==> @3 (and (x' = x) (tau' = tau + 2));
}

{
    mode 2;         // goal mode
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = -3;
        d/dt[x_2] = 0;
    jump:
}

{
    mode 3;
    time: [0, 10];
    flow:
        d/dt[tau] = 1;
        d/dt[x]   = 0;
        d/dt[x_2] = 0;
    jump:
}


init:
@0 (and (x = 0) (tau = 0) (x_2 = sqrt(y*y)));

goal:
@2 (and (tau = TMAX) (x <= -1));
