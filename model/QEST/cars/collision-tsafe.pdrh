model: npha;
#define v01_init 11.12 //car1 initial speed (m/s)
#define v02_init 11.12 //car2 initial speed (m/s)
#define v_max 16.67 //speed limit (m/s)
//#define t_safe 2 //"2 seconds rule" (s)
#define s01 0 //car1 initial position (m)
#define s02 s01 + v01 * t_safe //car2 initial position (m)
#define aa1 3 //car1 acceleration (m/s^2)
#define aa2 0 //car2 acceleration (m/s^2)
//#define ad1 -2.0 //car1 deceleration (m/s^2)
//#define ad2 -0.5 //car2 deceleration (m/s^2)
#define s_stop 200 //distance to the STOP sign (m)
#define car_length 5
//#define t_react 1 //time to react for car2 to hit the brakes (s)

dist_normal(-2.0, 0.2) ad1;
//dist_normal(3, 0.3) aa1;
dist_normal(-0.5, 0.1) ad2;
//dist_uniform(-2.1,-2.0)ad1;
//dist_uniform(-0.6,-0.5)ad2;


//[-0.7,-0.3]ad2;
//[-2.0,-0.5]ad1;
//[2.5,3.5]aa1;
[0,500]s1;
[0,500]s2;
[0,40]v1;
[0,40]v2;
[0,40]v01;
[0,40]v02;
[0,60]tau;
[0,60]time;
//[0.5,1.5]t_react;
[1.0,2.0]t_safe;
#define t_react 1.5
//#define t_safe 1.0

// car1 started accelerating
// car2 is moving with a constant speed
{
mode 1;
flow:
d/dt[s1]=v01_init + aa1 * tau;
d/dt[s2]=v02_init;
d/dt[v1]=aa1;
d/dt[v2]=0.0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[tau]=1.0;
jump:
(and (s1 = s2 + v2 * t_safe))==>@2(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
}

// car1 started decelerating
// car2 is moving with a constant speed
{
mode 2;
flow:
d/dt[s1]=v01 + ad1 * tau;
d/dt[s2]=v02;
d/dt[v1]=ad1;
d/dt[v2]=0.0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[tau]=1.0;
jump:
(and (tau = t_react))==>@3(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
}

// car1 is decelerating
// car2 started decelerating
{
mode 3;
flow:
d/dt[s1]=v01 + ad1 * tau;
d/dt[s2]=v02 + ad2 * tau;
d/dt[v1]=ad1;
d/dt[v2]=ad2;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[tau]=1.0;
jump:
(and (v1 <= 0))==>@4(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
(and (v2 <= 0))==>@5(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
}

// car1 stopped
// car2 is decelerating
{
mode 4;
flow:
d/dt[s1]=0;
d/dt[s2]=v02 + ad2 * tau;
d/dt[v1]=0;
d/dt[v2]=ad2;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[tau]=1.0;
jump:
(and (v2 <= 0))==>@6(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
}

// car1 is decelerating
// car2 stopped
{
mode 5;
flow:
d/dt[s1]=v01 + ad1 * tau;
d/dt[s2]=0;
d/dt[v1]=ad1;
d/dt[v2]=0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[tau]=1.0;
jump:
(and (v1 <= 0))==>@6(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (tau' = 0) (ad1'=ad1) (ad2'=ad2)(t_safe'=t_safe));
}

// car1 stopped
// car2 stopped
{
mode 6;
flow:
d/dt[s1]=0;
d/dt[s2]=0;
d/dt[v1]=0;
d/dt[v2]=0;
d/dt[v01]=0;
d/dt[v02]=0;
d/dt[tau]=0.0;
jump:

}

init:
@1(and 
		(s1 = s01) 
		(s2 = s02) 
		(v1 = v01_init) 
		(v2 = v02_init) 
		(v01 = v01_init)
		(v02 = v02_init)
		(tau = 0));

goal:
@6(and (tau = 0)(s1 < s2 - car_length));
//@1(s1 >= s2 + v2 * t_safe);
//@2(and (tau = 0) (s1 >= s2 + v2 * t_safe));
