(set-logic QF_NRA_ODE)
; declaring functions and their bounds
(declare-fun Sx () Real)
(declare-fun Sx_0_0 () Real)
(declare-fun Sx_0_t () Real)
(assert (>= Sx_0_0 (- 10)))
(assert (>= Sx_0_t (- 10)))
(assert (<= Sx_0_0  1000))
(assert (<= Sx_0_t  1000))
(declare-fun Sy () Real)
(declare-fun Sy_0_0 () Real)
(declare-fun Sy_0_t () Real)
(assert (>= Sy_0_0  0))
(assert (>= Sy_0_t  0))
(assert (<= Sy_0_0  100))
(assert (<= Sy_0_t  100))
(declare-fun alpha () Real)
(declare-fun alpha_0_0 () Real)
(declare-fun alpha_0_t () Real)
(declare-fun t () Real)
(declare-fun t_0_0 () Real)
(declare-fun t_0_t () Real)
(assert (>= t_0_0  0))
(assert (>= t_0_t  0))
(assert (<= t_0_0  15))
(assert (<= t_0_t  15))
(declare-fun v0 () Real)
(declare-fun v0_0_0 () Real)
(declare-fun v0_0_t () Real)
; assigning the values of the sample
(assert (>= alpha_0_0 0.5235999999999998))
(assert (>= alpha_0_t 0.5235999999999998))
(assert (<= alpha_0_0 0.5236000000000001))
(assert (<= alpha_0_t 0.5236000000000001))
(assert (>= v0_0_0 6.099999999999999))
(assert (>= v0_0_t 6.099999999999999))
(assert (<= v0_0_0 33.90000000000001))
(assert (<= v0_0_t 33.90000000000001))
; declaring time variable and integration bounds
(declare-fun time () Real)
(assert (>= time 0.0))
(assert (<= time 0))
; defining odes
(define-ode flow_1 ((= d/dt[Sx] (* v0(cos alpha)))
(= d/dt[Sy] (-(* v0(sin alpha))(* 9.8 t)))
(= d/dt[alpha]  0)
(= d/dt[t]  1.0)
(= d/dt[v0]  0)
))
; defining initial condition
(assert (and (>= Sx_0_0 -4.940656458412465e-324) (<= Sx_0_0 4.940656458412465e-324)))
(assert (and (>= Sy_0_0 -4.940656458412465e-324) (<= Sy_0_0 4.940656458412465e-324)))
(assert (and (>= t_0_0 -4.940656458412465e-324) (<= t_0_0 4.940656458412465e-324)))
; defining the integral
(assert (= [Sx_0_t Sy_0_t alpha_0_t t_0_t v0_0_t ] (integral 0.0 time [Sx_0_0 Sy_0_0 alpha_0_0 t_0_0 v0_0_0 ] flow_1)))
; defining invariants negations
(assert (or
))
(check-sat)
(exit)
