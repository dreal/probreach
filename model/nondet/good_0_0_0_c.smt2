(set-logic QF_NRA_ODE)
; declaring functions and their bounds
(declare-fun n () Real)
(declare-fun n_0_0 () Real)
(declare-fun n_0_t () Real)
(assert (>= n_0_0  0))
(assert (>= n_0_t  0))
(assert (<= n_0_0  1))
(assert (<= n_0_t  1))
(declare-fun r () Real)
(declare-fun r_0_0 () Real)
(declare-fun r_0_t () Real)
(assert (>= r_0_0  0))
(assert (>= r_0_t  0))
(assert (<= r_0_0  1))
(assert (<= r_0_t  1))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  1))
(assert (<= tau_0_t  1))
(declare-fun x () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(assert (>= x_0_0  0))
(assert (>= x_0_t  0))
(assert (<= x_0_0  1))
(assert (<= x_0_t  1))
; assigning the values of the sample
(assert (>= r_0_0 0.4999999999999999))
(assert (>= r_0_t 0.4999999999999999))
(assert (<= r_0_0 0.4999999999999999))
(assert (<= r_0_t 0.4999999999999999))
; declaring time variable and integration bounds
(declare-fun time () Real)
(assert (>= time 0.0))
(assert (<= time 1))
; defining odes
(define-ode flow_1 ((= d/dt[n]  0)
(= d/dt[r]  0)
(= d/dt[tau]  1)
(= d/dt[x]  0)
))
; defining initial condition
(assert (and (>= tau_0_0 -4.940656458412465e-324) (<= tau_0_0 4.940656458412465e-324)))
(assert (and (>= x_0_0 0.4999999999999999) (<= x_0_0 0.4999999999999999)))
; defining the integral
(assert (= [n_0_t r_0_t tau_0_t x_0_t ] (integral 0.0 time [n_0_0 r_0_0 tau_0_0 x_0_0 ] flow_1)))
; defining invariants negations
(assert (or
))
(check-sat)
(exit)
